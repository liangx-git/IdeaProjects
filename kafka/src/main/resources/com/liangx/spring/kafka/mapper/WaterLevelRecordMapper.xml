<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.liangx.spring.kafka.mapper.WaterLevelRecordMapper">

    <!-- 返回类型模式 -->
    <resultMap type="com.liangx.spring.kafka.common.WaterLevelRecord" id="waterlevelRecordResult" >
        <result column="time" jdbcType="TIMESTAMP" property="time" />
        <!--<result column="id" jdbcType="INTEGER" property="id" />-->
        <result column="site_id" jdbcType="INTEGER" property="siteId" />
        <result column="site_name" jdbcType="VARCHAR" property="siteName" />
        <result column="water_level" jdbcType="DOUBLE" property="waterLevel" />
    </resultMap>

    <!-- 单条记录插入 -->
    <insert id="insertRecord" parameterType="com.liangx.spring.kafka.common.WaterLevelRecord" keyProperty="time">
        INSERT INTO waterlevel_information(time, site_id, site_name, water_level)
        <if test="time != null and siteId != null and siteName != null and waterLevel != null">
          VALUES(#{time}, #{siteId}, #{siteName}, #{waterLevel})
        </if>
    </insert>

    <!--批量记录插入 -->
    <insert id="insertRecords" parameterType="com.liangx.spring.kafka.common.WaterLevelRecord">
          INSERT INTO waterlevel_information(time, site_id, site_name, water_level)
            VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.time}, #{item.siteId}, #{item.siteName}, #{item.waterLevel})
        </foreach>
    </insert>

    <!--<insert id="insertRecords" parameterType="com.liangx.spring.kafka.common.WaterLevelRecord">-->
      <!--<foreach collection="list" item="item" index="index" separator=";">-->
          <!--INSERT INTO waterlevel_information(time, id, site_id, site_name, water_level)-->
            <!--VALUES(#{item.time}, #{item.id}, #{item.siteId}, #{item.siteName}, #{item.waterLevel})-->
      <!--</foreach>-->
    <!--</insert>-->

    <!--根据id Select-->
    <!--<select id="queryById" parameterType="java.lang.Integer" resultMap="waterlevelRecordResult">-->
        <!--SELECT* FROM waterlevel_information WHERE id = #{id}-->
    <!--</select>-->

    <!-- 查询时间在beginTime到endTime之间的数据，COALESCE（）表示当查询结果为null时返回0 -->
    <select id="getAvgWaterLevelByInterval" parameterType="java.sql.Timestamp" resultType="java.lang.Double">
        SELECT COALESCE(AVG(water_level), 0) FROM waterlevel_information WHERE
        <if test="beginTime != null and endTime != null">
          time >= #{beginTime} AND time  &lt; #{endTime}
        </if>
    </select>

</mapper>