<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org"
      xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity3">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <link rel="stylesheet" href="/css/bootstrap/4.0.0/bootstrap.min.css">
    <link href="/css/v3/layoutit.css" rel="stylesheet">
    <link href="/css/jquery-ui.min.css" rel="stylesheet">
    <link href="/css/bootstap/toastr.min.css" rel="stylesheet">
    <!--<script src="/js/jquery-1.8.3.min.js"></script>-->
    <script src="/js/jquery-2.1.4.min.js"></script>
    <script src="/js/jquery-ui.min.js"></script>
    <script src="/js/echarts.min.js"></script>
    <script src="/js/highchart.js"></script>
    <script src="/js/toastr.min.js"></script>

    <!--<link rel="stylesheet" href="//apps.bdimg.com/libs/jqueryui/1.10.4/css/jquery-ui.min.css">-->
    <!--<script src="//apps.bdimg.com/libs/jquery/1.10.2/jquery.min.js"></script>-->
    <!--<script src="//apps.bdimg.com/libs/jqueryui/1.10.4/jquery-ui.min.js"></script>-->
    <!--<link rel="stylesheet" href="jqueryui/style.css">-->

    <!--<script src="/js/jquery-ui.min.js"></script>-->
    <!--<script src="https://code.highcharts.com.cn/highcharts/highcharts.js" ></script>-->
    <!--<script src="https://code.highcharts.com.cn/highcharts/modules/exporting.js"></script>-->
    <!--<script src="https://img.hcharts.cn/highcharts-plugins/highcharts-zh_CN.js"></script>-->
</head>
<body>
<div class="container">
    <div class="row clearfix">
        <div class="col-md-12 column">
            <nav class="navbar navbar-default" role="navigation">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1"> <span class="sr-only">Toggle navigation</span><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button> <a class="navbar-brand" href="#">Brand</a>
                </div>

                <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                    <ul class="nav navbar-nav">
                        <li class="active">
                            <a href="#">Link</a>
                        </li>
                        <li>
                            <a href="#">Link</a>
                        </li>
                        <li class="dropdown">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown<strong class="caret"></strong></a>
                            <ul class="dropdown-menu">
                                <li>
                                    <a href="#">Action</a>
                                </li>
                                <li>
                                    <a href="#">Another action</a>
                                </li>
                                <li>
                                    <a href="#">Something else here</a>
                                </li>
                                <li class="divider">
                                </li>
                                <li>
                                    <a href="#">Separated link</a>
                                </li>
                                <li class="divider">
                                </li>
                                <li>
                                    <a href="#">One more separated link</a>
                                </li>
                            </ul>
                        </li>
                    </ul>
                    <form class="navbar-form navbar-left" role="search">
                        <div class="form-group">
                            <input type="text" class="form-control" />
                        </div> <button type="submit" class="btn btn-default">Submit</button>
                    </form>
                    <ul class="nav navbar-nav navbar-right">
                        <li>
                            <a href="#">Link</a>
                        </li>
                        <li class="dropdown">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown<strong class="caret"></strong></a>
                            <ul class="dropdown-menu">
                                <li>
                                    <a href="#">Action</a>
                                </li>
                                <li>
                                    <a href="#">Another action</a>
                                </li>
                                <li>
                                    <a href="#">Something else here</a>
                                </li>
                                <li class="divider">
                                </li>
                                <li>
                                    <a href="#">Separated link</a>
                                </li>
                            </ul>
                        </li>
                    </ul>
                </div>

            </nav>



            <div class="row clearfix">

                <div id="real" class="col-md-10 column">

                    <!--<script>-->
                        <!--//消息提示全局配置-->
                        <!--toastr.options = {-->
                            <!--"closeButton": false,//是否配置关闭按钮-->
                            <!--"debug": false,//是否开启debug模式-->
                            <!--"newestOnTop": false,//新消息是否排在最上层-->
                            <!--"progressBar": false,//是否显示进度条-->
                            <!--"positionClass": "toast-top-center",//消息框的显示位置-->
                            <!--"preventDuplicates": false,//是否阻止弹出多个消息框-->
                            <!--"onclick": null,//点击回调函数-->
                            <!--"showDuration": "300",-->
                            <!--"hideDuration": "1000",-->
                            <!--"timeOut": "1500",//1.5s后关闭消息框-->
                            <!--"extendedTimeOut": "1000",-->
                            <!--"showEasing": "swing",-->
                            <!--"hideEasing": "linear",-->
                            <!--"showMethod": "fadeIn",-->
                            <!--"hideMethod": "fadeOut"-->
                        <!--}-->
                    <!--</script>-->

                    <!-- 实时监控图表 -->
                    <script>
                        Highcharts.setOptions({
                            // 纠正时区误差
                            global: {
                                timezoneOffset: -8 * 60
                            },
                            lang: {
                                loading: '数据加载中...'  // 加载中文字配置
                            }
                        });

                        // 定义实时图表
                        var chartReal = Highcharts.chart('real', {
                            chart: {
                                type: 'spline',
                                animation: {
                                    duration: 50
                                }
                            },
                            title: {
                                text: '实时监控'
                            },
                            credits: {
                                enabled: false
                            },
                            loading: {  // 加载中选项配置
                                labelStyle: {
                                    color: 'red',
                                    fontSize: '12px'
                                }
                            },
                            xAxis: {
                                type: 'category'
                            },
                            yAxis: {
                                title: {
                                    text: 'm'
                                },
                                min: 20,
                                max: 100,
                                plotBands: [{ // 水位警戒区域
                                    from: 80,
                                    to: 90,
                                    color: 'rgba(255, 185, 15, 0.1)',
                                    label: {
                                        text: '预警水位',
                                        style: {
                                            color: '#8B8989'
                                        }
                                    }
                                }, { // Light air
                                    from: 90,
                                    to: 100,
                                    color: 'rgba(255, 69, 0, 0.1)',
                                    label: {
                                        text: '危险水位',
                                        style: {
                                            color: '#8B8989'
                                        }
                                    }
                                }]
                            },
                            tooltip: {
                                valueSuffix: ' m'
                            },
                            series: [{
                                name: 'HoHai',
                                data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
                                pointStart: Date(),
                                pointInterval:  3000    //间隔为3秒
                            }]
                        });

                        //开启数据加载动画
                        chartReal.showLoading();
                        var chartRealIsShowLoading = true;

                        //存储chartReal显示的json数据
                        var seriesDatas = [];

                        //预警水位
                        var WarningWaterLevel = 80.0;

                        // 单个数据更新RealChart
                        var updateChartReal = function (data){
                            updateSeriesDatas(data);
                            chartReal.series[0].update({'data': seriesDatas});

                            //当水位低于预警水位，取消预警
                            if (data.waterLevel < 80.0 && chartReal.series[0].color == '#FF0000'){
                                chartReal.series[0].update({'color': '#7cb5ec'});
                            }

                            //水位预警
                            if (data.waterLevel >= 80.0){
                                chartReal.series[0].update({'color': '#FF0000'});
                                toastr.warning("超水位");
                            }
                        };

                        // 数组数据更新RealChart
                        var updateChartRealByArray = function(datas){
                            //将data转为json数据
                            for (var i in datas){
                                updateSeriesDatas(datas[i]);
                            }
                            //更新series
                            chartReal.series[0].update({'data': seriesDatas});
                        };

                        var updateSeriesDatas = function(data){
                            var record = {};
                            var date = new Date(data.time);
                            record["name"] = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();
                            record["y"] = data.waterLevel;
                            seriesDatas.push(record);
                            if (seriesDatas.length > 20){
                                seriesDatas.shift();
                            }
                        }
                        //
                        // function sort(elem1, elem2){
                        //     return (elem1.name > elem2.name);
                        // }



                    </script>

                    <!-- 滑动条 -->
                    <script>
                        var lastIndex = 0;
                        $(function(){
                            $("#chart-slider").slider({
                                range: "max",
                                min: 0,
                                max: 60,
                                value: 60,
                                slide: function(event, ui) {
                                    lastIndex = parseInt(60) - parseInt(ui.value);
                                    console.info("ui.max = " + parseInt(60) + " ui.value = " + parseInt(ui.value) + " index = " + parseInt(lastIndex));

                                    // 更新回显数据
                                    $("#notification-bar").val(lastIndex);
                                }
                            });
                            // 设置notification-bar显示初始值
                            $("#notification-bar").val(0);
                        });

                        //将需要回溯的时间戳发送给后端
                        var sendSliderTimestampByIndex = function(index){
                            var msg = [];
                            if (index === 0){
                                console.info("back_tracking_done");
                                msg.push("back_tracking_done");
                                var time = getTimestamp(index);
                                msg.push(time);
                                socket.send(JSON.stringify(msg));
                            }else{
                                msg.push("back_tracking");
                                var time = getTimestamp(index);
                                msg.push(time);
                                socket.send(JSON.stringify(msg));
                                console.info("msg = " + JSON.stringify(msg));
                            }

                        };

                        //根据index计算时间戳
                        var getTimestamp = function(index){
                            var time =  new Date(new Date().getTime() -  index * 60 * 1000).getTime();    //获取index 分钟之前的时间
                            var date = new Date(time);
                            console.info("timestamp = " + time + " date = " + date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds() + " now date = " + new Date());
                            return time;
                        };

                        //重置滑动条，移至开始位置
                        var resetSlider = function(){
                            $("#chart-slider").slider({
                                value: 60
                            });
                            $("#notification-bar").val(0);
                        };

                    </script>

                    <p>
                        <label for="notification-bar">回溯时间（分钟）：</label>
                        <input type="text" id="notification-bar" style="border:0; color:#f6931f; font-weight:bold;">
                    </p>

                    <!-- 当鼠标松开快动块时获取后台数据 -->
                    <div id="chart-slider" onmouseup="sendSliderTimestampByIndex(lastIndex)"
                         onkeyup="sendSliderTimestampByIndex(lastIndex)">

                    </div>
                </div>

                <div class="col-md-2 column">
                    <button type="button" class="btn btn-primary btn-default btn-block">按钮</button>
                    <button type="button" class="btn btn-primary btn-default btn-block">按钮</button>
                </div>

            </div>

            <div class="alert alert-success alert-dismissable">
                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                    <h4>
                        注意!
                    </h4>
                    <strong>Warning!</strong> Best check yo self, you're not looking too good. <a href="#" class="alert-link">alert link</a>
                </div>

        </div>


        <!-- 图表2 -->
        <div id="daily" class="col-md-4 column" style="height:300px;border:1px solid #ccc;padding:10px;"></div>

        <div id="left" class="col-md-4 column" style="height:300px;border:1px solid #ccc;padding:10px;">
            <script>

                // 定义实时图表
                var chartDaily = Highcharts.chart('daily', {
                    chart: {
                        type: 'spline',
                        animation: {
                            duration: 50
                        }
                    },
                    title: {
                        text: '日监控'
                    },
                    credits: {
                        enabled: false
                    },
                    loading: {  // 加载中选项配置
                        labelStyle: {
                            color: 'red',
                            fontSize: '12px'
                        }
                    },
                    xAxis: {
                        type: 'category'
                    },
                    yAxis: {
                        title: {
                            text: 'm'
                        },
                        min: 20,
                        max: 100
                    },
                    tooltip: {
                        valueSuffix: ' m'
                    },
                    series: [{
                        name: 'HoHai',
                        data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        // pointStart: Date(),
                        // pointInterval:  3000    //间隔为3秒
                    }]
                });


                var chartLeft = echarts.init(document.getElementById('left'));
                chartLeft.setOption({
                    title: {
                        text: '日监控'
                    },
                    tooltip: {},
                    legend: {
                        // data:[''/*, '苏州'*/]
                    },
                    xAxis: {
                        title: {
                            text: '小时'
                        },
                        data: []
                    },
                    yAxis: {
                        name: 'm',
                        show: true,
                        type: 'value',
                        max: 100,
                        min: 0
                        // axisLabel:{
                        //     formatter: '{value} m'
                        // }
                    },
                    series: [{
                        // name: '',
                        type: 'line',
                        data: []
                    }]
                });

                var leftTime = ["","","","","","","","","","","",""],
                    leftPosition = [0,0,0,0,0,0,0,0,0,0,0,0];


                //准备好统一的 callback 函数
                var updateChartLeft = function (data) { //res是json格式的response对象

                    // 隐藏加载动画
                    chartLeft.hideLoading();

                    // 准备数据
                    var timestamp = parseInt(data.time);  //获取时间戳
                    var date = new Date(timestamp);     //将时间戳转为Date
                    var hh = date.getHours();
                    var waterLevel = parseFloat(data.waterLevel).toFixed(2);    //截取水位数据仅保留小数点后两位
                    var location = data.siteName;

                    leftTime.push(hh);
                    leftPosition.push(waterLevel);
                    // console.log("date = " + date + " leftEchart : waterLevel = " + waterLevel);


                    if (leftTime.length >= 12){
                        leftTime.shift();
                        leftPosition.shift();
                    }

                    // 填入数据
                    chartLeft.setOption({
                        legend:{
                            data: [location]
                        },
                        xAxis: {
                            data: leftTime
                        },
                        series: [{
                            // name: '南京',
                            name: [location],
                            data: leftPosition
                        }]
                    });

                };

                // 首次显示加载动画
                chartLeft.showLoading();

                //图表自适应
                window.addEventListener("resize", function(){
                    chartLeft.resize();
                })

            </script>

            <!--<h2>-->
            <!--Heading-->
            <!--</h2>-->
            <!--<p>-->
            <!--Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.-->
            <!--</p>-->
            <p>
                <a class="btn" href="#">View details »</a>
            </p>
        </div>

        <!-- 图表3-->
        <div id="center" class="col-md-4 column" style="height:300px;border:1px solid #ccc;padding:10px;">
            <script>
                var chartCenter = echarts.init(document.getElementById('center'));

                chartCenter.setOption({
                    title: {
                        text: '周监控'
                    },
                    tooltip: {},
                    legend: {
                        data:['南京'/*, '苏州'*/]
                    },
                    xAxis: {
                        // type: 'time',
                        // splitNumber: 24,
                        data: []
                    },
                    yAxis: {
                        type: 'value',
                        max: 100,
                        min: 0,
                        axisLabel:{
                            formatter: '{value} m'
                        }
                    },
                    series: [{
                        name: '南京',
                        type: 'line',
                        data: []
                    }]
                });

                var centerTime = ["","","","","","",""],
                    centerPosition = [0,0,0,0,0,0,0];

                //准备好统一的 callback 函数
                var updateChartCenter= function (data) { //res是json格式的response对象

                    // 隐藏加载动画
                    chartCenter.hideLoading();

                    // 准备数据
                    var timestamp = parseInt(data.time);  //获取时间戳
                    var date = new Date(timestamp);     //将时间戳转为Date
                    var hhmmss = date.getDay();
                    var waterLevel = parseFloat(data.waterLevel).toFixed(2);    //截取水位数据仅保留小数点后两位
                    var location = data.siteName;

                    centerTime.push(hhmmss);
                    centerPosition.push(waterLevel);

                    if (centerTime.length >= 7){
                        centerTime.shift();
                        centerPosition.shift();
                    }

                    // 填入数据
                    chartCenter.setOption({
                        legend: {
                            data: [location]
                        },
                        xAxis: {
                            data: centerTime
                        },
                        series: [{
                            name: [location],
                            data: centerPosition
                        }]
                    });
                };

                // 首次显示加载动画
                chartCenter.showLoading();

                //图表自适应
                window.addEventListener("resize", function(){
                    chartCenter.resize();
                })

            </script>

            <!--<h2>-->
            <!--Heading-->
            <!--</h2>-->
            <!--<p>-->
            <!--Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.-->
            <!--</p>-->
            <p>
                <a class="btn" href="#">View details »</a>
            </p>
        </div>

        <!-- 图表4-->
        <div id="right" class="col-md-4 column" style="height:300px;border:1px solid #ccc;padding:10px;">

            <script>
                var chartRight= echarts.init(document.getElementById('right'));

                chartRight.setOption({
                    title: {
                        text: '月监控'
                    },
                    tooltip: {},
                    legend: {
                        data:['南京'/*, '苏州'*/]
                    },
                    xAxis: {
                        data: []
                    },
                    yAxis: {
                        type: 'value',
                        max: 100,
                        min: 0,
                        axisLabel:{
                            formatter: '{value} m'
                        }
                    },
                    series: [{
                        name: '南京',
                        type: 'line',
                        data: []
                    }]
                });

                var rightTime = ["","","","","","","","","",""],
                    rightPosition = [0,0,0,0,0,0,0,0,0,0];

                //准备好统一的 callback 函数
                var updateChartRight= function (data) { //res是json格式的response对象

                    // 隐藏加载动画
                    chartRight.hideLoading();

                    // 准备数据
                    var timestamp = parseInt(data.time);  //获取时间戳
                    var date = new Date(timestamp);     //将时间戳转为Date
                    var hhmmss = date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
                    var waterLevel = parseFloat(data.waterLevel).toFixed(2);    //截取水位数据仅保留小数点后两位
                    rightTime.push(hhmmss);
                    rightPosition.push(waterLevel);

                    if (rightTime.length >= 10){
                        rightTime.shift();
                        rightPosition.shift();
                    }

                    // 填入数据
                    chartRight.setOption({
                        legend: {
                            data: [location]
                        },
                        xAxis: {
                            data: rightTime
                        },
                        series: [{
                            name: '南京',
                            data: rightPosition
                        }]
                    });

                };

                // 首次显示加载动画
                chartRight.showLoading();

                //图表自适应
                window.addEventListener("resize", function(){
                    chartRight.resize();
                })
            </script>



            <!--<h2>-->
            <!--Heading-->
            <!--</h2>-->
            <!--<p>-->
            <!--Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.-->
            <!--</p>-->
            <p>
                <a class="btn" href="#">View details »</a>
            </p>
        </div>

        <!-- WebSocket -->
        <script>
            var back = function(){
                console.info("调用back()");
                socket.send("back");
            };

            var real = function(){
                console.info("调用real()");
                socket.send("real");
            };

            // toastr.options.positionClass = 'toast-bottom-right';

            //定义socket连接
            var socket;
            function ws() {
                if (window.WebSocket) {
                    socket = new WebSocket("ws://localhost:8080/webSocket");
                    // socket = new WebSocket("ws://192.168.42.183:8080/webSocket");
                    socket.onmessage = function (event) {

                        var datas = JSON.parse(event.data);
                        if (datas[0] === "real_monitor"){
                            // alert("main");
                            if (datas[1] instanceof Array){
                                console.info("收到数组数据");
                                updateChartRealByArray(datas[1]);
                            }else{
                                console.info("收到数据： record( timestmap = " + datas[1].timestamp + ", id = " + datas[1].id + ", siteName = " + datas[1].siteName + ", waterLevel = " + datas[1].waterLevel);
                                // updateChartMain(datas[1]);
                                updateChartReal(datas[1]);
                            }

                            //关闭chartReal的数据加载动画
                            if (chartRealIsShowLoading){
                                chartReal.hideLoading();
                                chartRealIsShowLoading = false
                            }
                        }else if(datas[0] === "HOURLY"){
                            // alert("left");
                            if (datas[1] instanceof Array){
                                // console.info("datas[1] is Array");
                                for (var i in datas[1]){
                                    // alert("datas[1][" + i + "] = " + datas[1][i]);
                                    updateChartLeft(datas[1][i]);
                                }
                            }else{
                                updateChartLeft(datas[1]);
                            }

                        }else if(datas[0] === "WEEKLY"){
                            // alert("center");
                            if (datas[1] instanceof Array) {
                                for (var i in datas[1]) {
                                    updateChartCenter(datas[1][i]);
                                }
                            }else{
                                updateChartCenter(datas[1]);
                            }
                        }else if(datas[0] === "MONTHLY"){
                            // alert("right");
                            if (datas[1] instanceof Array){
                                for (var i in datas[1]){
                                    updateChartRight(datas[1][i]);
                                }
                            }else{
                                updateChartRight(datas[1]);
                            }

                        }else if (datas[0] === "back_tracking_done"){
                            //后台的BackTrackingListener关闭时，将chart-slider滑快位置初始化为最右端
                            resetSlider();
                        } else{
                            alert("error(reponsetype = " + datas[0] + ")");
                        }

                    };
                    socket.onopen = function (event) {
                        console.info("连接开启");
                    };
                    socket.onclose = function (event) {
                        console.info("连接被关闭");
                    };
                } else {
                    alert("你的浏览器不支持 WebSocket！");
                }

            }

            //建立socket连接，等待服务器“推送”数据，用回调函数更新图表
            $(document).ready(function() {
                namespace = '/test';

                //开始建立WebSocket传输数据
                ws();
            });

        </script>

    </div>

    <div class="row clearfix">


    </div>
</div>
</body>
</html>